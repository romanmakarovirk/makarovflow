/**
 * AI Service for mood analysis using Hugging Face Inference API
 * Free tier: No API key required for some models
 */

// Hugging Face Inference API endpoint
const HF_API_URL = 'https://api-inference.huggingface.co/models';

/**
 * Analyze mood from journal entry text
 * Uses a free sentiment analysis model
 */
export const analyzeMoodFromText = async (text) => {
  if (!text || text.trim().length === 0) {
    return null;
  }

  try {
    // Using a multilingual sentiment model that supports Russian
    const response = await fetch(`${HF_API_URL}/cardiffnlp/twitter-xlm-roberta-base-sentiment`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: text,
        options: { wait_for_model: true }
      })
    });

    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }

    const result = await response.json();

    // Result format: [{ label: 'positive', score: 0.9 }, ...]
    if (Array.isArray(result) && result.length > 0) {
      const sentiment = result[0];

      // Map sentiment to mood score (1-10)
      let moodScore = 5; // neutral default

      sentiment.forEach(item => {
        if (item.label === 'positive') {
          moodScore = Math.round(5 + (item.score * 5)); // 5-10
        } else if (item.label === 'negative') {
          moodScore = Math.round(5 - (item.score * 5)); // 0-5
        }
      });

      return {
        score: Math.max(1, Math.min(10, moodScore)),
        sentiment: sentiment[0].label,
        confidence: sentiment[0].score
      };
    }

    return null;
  } catch (error) {
    console.error('AI mood analysis failed:', error);
    return null;
  }
};

/**
 * Generate insights from journal entries
 * Analyzes patterns in mood, energy, and sleep
 */
export const generateInsights = async (entries) => {
  if (!entries || entries.length === 0) {
    return {
      summary: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
      suggestions: [],
      insights: []
    };
  }

  try {
    // Calculate averages
    const avgMood = entries.reduce((sum, e) => sum + e.mood, 0) / entries.length;
    const avgEnergy = entries.reduce((sum, e) => sum + (e.energy || 50), 0) / entries.length;
    const avgSleep = entries.reduce((sum, e) => sum + (e.sleepHours || 7), 0) / entries.length;

    // Find patterns
    const insights = [];

    // üîÆ ADD MOOD PREDICTION
    const prediction = predictTomorrowMood(entries);
    if (prediction) {
      insights.push({
        type: 'prediction',
        icon: 'üîÆ',
        text: `–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—É–¥–µ—Ç ${prediction.trendText} (${prediction.predictedMood}/10). –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${prediction.confidence}%`
      });

      // Add prediction-based recommendations
      if (prediction.trend === 'declining') {
        insights.push({
          type: 'suggestion',
          icon: 'üí°',
          text: prediction.recommendations[0]
        });
      }
    }

    // üìä ADD TASK-MOOD CORRELATION
    const taskCorrelation = await analyzeTaskMoodCorrelation(entries);
    if (taskCorrelation && taskCorrelation.insights) {
      insights.push(...taskCorrelation.insights);
    }

    // Mood insights
    if (avgMood >= 8) {
      insights.push({
        type: 'positive',
        icon: 'üòä',
        text: '–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
      });
    } else if (avgMood <= 4) {
      insights.push({
        type: 'warning',
        icon: 'üíô',
        text: '–ó–∞–º–µ—á–∞—é, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–µ –æ—á–µ–Ω—å. –ü–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞—Ç—å –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª—é–±–∏–º—ã–º–∏ –¥–µ–ª–∞–º–∏.'
      });
    }

    // Energy insights
    if (avgEnergy < 40) {
      insights.push({
        type: 'suggestion',
        icon: '‚ö°',
        text: '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é –±–æ–ª—å—à–µ –¥–≤–∏–≥–∞—Ç—å—Å—è, –ø–∏—Ç—å –≤–æ–¥—É –∏ –≤—ã—Å—ã–ø–∞—Ç—å—Å—è.'
      });
    }

    // Sleep insights
    if (avgSleep < 7) {
      insights.push({
        type: 'warning',
        icon: 'üò¥',
        text: `–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–Ω–∞: ${avgSleep.toFixed(1)}—á. –°—Ç–∞—Ä–∞–π—Å—è —Å–ø–∞—Ç—å –º–∏–Ω–∏–º—É–º 7-8 —á–∞—Å–æ–≤.`
      });
    } else if (avgSleep >= 8) {
      insights.push({
        type: 'positive',
        icon: '‚ú®',
        text: '–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞! –≠—Ç–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —ç–Ω–µ—Ä–≥–∏—é.'
      });
    }

    // Correlation between sleep and mood
    const goodSleepDays = entries.filter(e => e.sleepHours >= 7);
    const badSleepDays = entries.filter(e => e.sleepHours < 7);

    if (goodSleepDays.length > 0 && badSleepDays.length > 0) {
      const avgMoodGoodSleep = goodSleepDays.reduce((sum, e) => sum + e.mood, 0) / goodSleepDays.length;
      const avgMoodBadSleep = badSleepDays.reduce((sum, e) => sum + e.mood, 0) / badSleepDays.length;

      if (avgMoodGoodSleep - avgMoodBadSleep > 1.5) {
        insights.push({
          type: 'insight',
          icon: 'üîç',
          text: `–ö–æ–≥–¥–∞ —Ç—ã –≤—ã—Å—ã–ø–∞–µ—à—å—Å—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞ ${(avgMoodGoodSleep - avgMoodBadSleep).toFixed(1)} –±–∞–ª–ª–∞ –≤—ã—à–µ!`
        });
      }
    }

    // Weekly trend
    if (entries.length >= 7) {
      const recentMood = entries.slice(0, 3).reduce((sum, e) => sum + e.mood, 0) / 3;
      const olderMood = entries.slice(-3).reduce((sum, e) => sum + e.mood, 0) / 3;

      if (recentMood > olderMood + 1) {
        insights.push({
          type: 'positive',
          icon: 'üìà',
          text: '–¢–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–æ–±–æ–π.'
        });
      } else if (recentMood < olderMood - 1) {
        insights.push({
          type: 'warning',
          icon: 'üìâ',
          text: '–ó–∞–º–µ—Ç–∏–ª —É—Ö—É–¥—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è. –ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –≤–∑—è—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å?'
        });
      }
    }

    return {
      summary: `–°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${avgMood.toFixed(1)}/10 ‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: ${avgEnergy.toFixed(0)}% ‚Ä¢ –°–æ–Ω: ${avgSleep.toFixed(1)}—á`,
      avgMood,
      avgEnergy,
      avgSleep,
      insights
    };
  } catch (error) {
    console.error('Failed to generate insights:', error);
    return {
      summary: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã',
      insights: []
    };
  }
};

/**
 * Predict tomorrow's mood based on patterns
 * Uses simple linear regression on recent data
 */
export const predictTomorrowMood = (entries) => {
  if (!entries || entries.length < 7) {
    return null; // Need at least a week of data
  }

  try {
    // Get last 14 days for better prediction
    const recentEntries = entries.slice(0, 14);

    // Calculate trend (simple linear regression)
    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
    const n = recentEntries.length;

    recentEntries.forEach((entry, index) => {
      const x = index;
      const y = entry.mood;
      sumX += x;
      sumY += y;
      sumXY += x * y;
      sumX2 += x * x;
    });

    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
    const intercept = (sumY - slope * sumX) / n;

    // Predict next day
    const predictedMood = slope * n + intercept;

    // Calculate average sleep and energy for context
    const avgSleep = recentEntries.reduce((sum, e) => sum + (e.sleepHours || 7), 0) / n;
    const avgEnergy = recentEntries.reduce((sum, e) => sum + (e.energy || 50), 0) / n;
    const currentMood = recentEntries[0].mood;

    // Adjust prediction based on sleep and energy
    let adjustedPrediction = predictedMood;

    if (avgSleep < 7) {
      adjustedPrediction -= 0.5; // Poor sleep decreases mood
    } else if (avgSleep >= 8) {
      adjustedPrediction += 0.3; // Good sleep improves mood
    }

    if (avgEnergy < 40) {
      adjustedPrediction -= 0.5; // Low energy decreases mood
    } else if (avgEnergy >= 70) {
      adjustedPrediction += 0.3; // High energy improves mood
    }

    // Clamp to 1-10 range
    adjustedPrediction = Math.max(1, Math.min(10, adjustedPrediction));

    // Determine trend
    const moodChange = adjustedPrediction - currentMood;
    let trend = 'stable';
    let trendIcon = '‚û°Ô∏è';
    let trendText = '–ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫–∏–º –∂–µ';

    if (moodChange > 0.5) {
      trend = 'improving';
      trendIcon = 'üìà';
      trendText = '–ª—É—á—à–µ';
    } else if (moodChange < -0.5) {
      trend = 'declining';
      trendIcon = 'üìâ';
      trendText = '–Ω–µ–º–Ω–æ–≥–æ —Ö—É–∂–µ';
    }

    // Generate recommendations based on prediction
    const recommendations = [];

    if (trend === 'declining') {
      recommendations.push('–£–¥–µ–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–Ω—É –∏ –æ—Ç–¥—ã—Ö—É');
      recommendations.push('–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞');
      recommendations.push('–ò–∑–±–µ–≥–∞–π —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö –∑–∞–¥–∞—á, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ');
    } else if (trend === 'improving') {
      recommendations.push('–û—Ç–ª–∏—á–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á!');
      recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ');
      recommendations.push('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    } else {
      recommendations.push('–ü—Ä–æ–¥–æ–ª–∂–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–µ–∂–∏–º–æ–º');
      recommendations.push('–î–æ–±–∞–≤—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –≤ —Ä—É—Ç–∏–Ω—É');
    }

    return {
      predictedMood: Math.round(adjustedPrediction * 10) / 10,
      currentMood,
      trend,
      trendIcon,
      trendText,
      confidence: Math.min(95, 50 + (n * 3)), // Confidence increases with more data
      recommendations,
      factors: {
        avgSleep: avgSleep.toFixed(1),
        avgEnergy: avgEnergy.toFixed(0),
        dataPoints: n
      }
    };
  } catch (error) {
    console.error('Prediction error:', error);
    return null;
  }
};

/**
 * Analyze correlation between tasks completion and mood
 */
export const analyzeTaskMoodCorrelation = async (entries, tasks) => {
  if (!entries || entries.length < 7) {
    return null;
  }

  try {
    // Import tasks from database
    const { tasks: tasksDB } = await import('../db/database');
    const allTasks = await tasksDB.getAll();

    // Group entries by date and calculate task completion rate
    const dailyStats = [];

    for (const entry of entries) {
      const entryDate = entry.date;

      // Get tasks for this date
      const dateTasks = allTasks.filter(task => {
        const taskDate = task.createdAt ? task.createdAt.split('T')[0] : null;
        return taskDate === entryDate;
      });

      const completedTasks = dateTasks.filter(t => t.completed).length;
      const totalTasks = dateTasks.length;
      const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : null;

      if (completionRate !== null) {
        dailyStats.push({
          date: entryDate,
          mood: entry.mood,
          energy: entry.energy || 50,
          completionRate,
          completedTasks,
          totalTasks
        });
      }
    }

    if (dailyStats.length < 3) {
      return null; // Not enough data
    }

    // Calculate correlation between completion rate and mood
    const avgCompletionRate = dailyStats.reduce((sum, d) => sum + d.completionRate, 0) / dailyStats.length;
    const avgMood = dailyStats.reduce((sum, d) => sum + d.mood, 0) / dailyStats.length;

    // Simple correlation coefficient
    let numerator = 0;
    let denominator1 = 0;
    let denominator2 = 0;

    dailyStats.forEach(stat => {
      const completionDiff = stat.completionRate - avgCompletionRate;
      const moodDiff = stat.mood - avgMood;
      numerator += completionDiff * moodDiff;
      denominator1 += completionDiff * completionDiff;
      denominator2 += moodDiff * moodDiff;
    });

    const correlation = numerator / Math.sqrt(denominator1 * denominator2);

    // Find high productivity days vs low productivity days
    const highProductivity = dailyStats.filter(d => d.completionRate >= 70);
    const lowProductivity = dailyStats.filter(d => d.completionRate < 40);

    const avgMoodHighProd = highProductivity.length > 0
      ? highProductivity.reduce((sum, d) => sum + d.mood, 0) / highProductivity.length
      : null;

    const avgMoodLowProd = lowProductivity.length > 0
      ? lowProductivity.reduce((sum, d) => sum + d.mood, 0) / lowProductivity.length
      : null;

    // Generate insights
    const insights = [];

    if (correlation > 0.5) {
      insights.push({
        type: 'positive',
        icon: '‚úÖ',
        text: `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ö–æ–≥–¥–∞ —Ç—ã –∑–∞–≤–µ—Ä—à–∞–µ—à—å –∑–∞–¥–∞—á–∏, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã—à–µ –Ω–∞ ${((avgMoodHighProd - avgMoodLowProd) || 0).toFixed(1)} –±–∞–ª–ª–∞.`
      });
    } else if (correlation < -0.3) {
      insights.push({
        type: 'warning',
        icon: '‚ö†Ô∏è',
        text: '–ü–æ—Ö–æ–∂–µ, –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.'
      });
    }

    // Best productivity time analysis
    const morningTasks = dailyStats.filter(d => d.completedTasks > 0 && d.energy >= 60);
    const eveningTasks = dailyStats.filter(d => d.completedTasks > 0 && d.energy < 60);

    if (morningTasks.length > eveningTasks.length) {
      insights.push({
        type: 'insight',
        icon: 'üåÖ',
        text: '–¢—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏. –ü–ª–∞–Ω–∏—Ä—É–π —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–æ!'
      });
    }

    // Task overload detection
    const avgTasksPerDay = dailyStats.reduce((sum, d) => sum + d.totalTasks, 0) / dailyStats.length;
    const overloadDays = dailyStats.filter(d => d.totalTasks > avgTasksPerDay * 1.5);

    if (overloadDays.length > 0) {
      const avgMoodOverload = overloadDays.reduce((sum, d) => sum + d.mood, 0) / overloadDays.length;
      if (avgMoodOverload < avgMood - 1) {
        insights.push({
          type: 'warning',
          icon: 'üìä',
          text: `–í –¥–Ω–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á (${Math.round(avgTasksPerDay * 1.5)}+) –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∏–∂–µ. –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–π –∑–∞–¥–∞—á–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–µ–µ!`
        });
      }
    }

    return {
      correlation: correlation.toFixed(2),
      avgCompletionRate: avgCompletionRate.toFixed(0),
      avgMoodHighProd: avgMoodHighProd ? avgMoodHighProd.toFixed(1) : null,
      avgMoodLowProd: avgMoodLowProd ? avgMoodLowProd.toFixed(1) : null,
      insights,
      dataPoints: dailyStats.length
    };
  } catch (error) {
    console.error('Task-mood correlation error:', error);
    return null;
  }
};

/**
 * Get mood recommendation based on current state
 */
export const getMoodRecommendation = (mood, energy, sleepHours) => {
  const recommendations = [];

  // Low mood recommendations
  if (mood <= 4) {
    recommendations.push({
      title: '–ü–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      icon: 'üåü',
      suggestions: [
        '–ü–æ—Å–ª—É—à–∞–π –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É',
        '–ü—Ä–æ–≥—É–ª—è–π—Å—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
        '–ü–æ–∑–≤–æ–Ω–∏ –¥—Ä—É–≥—É –∏–ª–∏ –±–ª–∏–∑–∫–æ–º—É —á–µ–ª–æ–≤–µ–∫—É',
        '–ó–∞–π–º–∏—Å—å –ª—é–±–∏–º—ã–º —Ö–æ–±–±–∏',
        '–ü–æ—Å–º–æ—Ç—Ä–∏ —á—Ç–æ-—Ç–æ —Å–º–µ—à–Ω–æ–µ'
      ]
    });
  }

  // Low energy recommendations
  if (energy < 40) {
    recommendations.push({
      title: '–ü–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é',
      icon: '‚ö°',
      suggestions: [
        '–°–¥–µ–ª–∞–π –ª—ë–≥–∫—É—é –∑–∞—Ä—è–¥–∫—É –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫—É',
        '–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã',
        '–°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤ –∏ –ø–æ–¥—ã—à–∏ —Å–≤–µ–∂–∏–º –≤–æ–∑–¥—É—Ö–æ–º',
        '–ü–µ—Ä–µ–∫—É—Å–∏ —á–µ–º-—Ç–æ –ø–æ–ª–µ–∑–Ω—ã–º',
        '–í–∑–¥—Ä–µ–º–Ω–∏ 15-20 –º–∏–Ω—É—Ç'
      ]
    });
  }

  // Poor sleep recommendations
  if (sleepHours < 7) {
    recommendations.push({
      title: '–£–ª—É—á—à–∏—Ç—å —Å–æ–Ω',
      icon: 'üò¥',
      suggestions: [
        '–õ–æ–∂–∏—Å—å —Å–ø–∞—Ç—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è',
        '–ò–∑–±–µ–≥–∞–π –≥–∞–¥–∂–µ—Ç–æ–≤ –∑–∞ —á–∞—Å –¥–æ —Å–Ω–∞',
        '–ü—Ä–æ–≤–µ—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º',
        '–ü–æ–ø—Ä–æ–±—É–π –º–µ–¥–∏—Ç–∞—Ü–∏—é –∏–ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
        '–ü–æ—á–∏—Ç–∞–π –∫–Ω–∏–≥—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º'
      ]
    });
  }

  // Good state - positive reinforcement
  if (mood >= 8 && energy >= 70 && sleepHours >= 7) {
    recommendations.push({
      title: '–¢—ã –≤ –æ—Ç–ª–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ!',
      icon: 'üéâ',
      suggestions: [
        '–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª',
        '–ü–æ–¥–µ–ª–∏—Å—å –ø–æ–∑–∏—Ç–∏–≤–æ–º —Å –æ–∫—Ä—É–∂–∞—é—â–∏–º–∏',
        '–ó–∞–ø–æ–º–Ω–∏, —á—Ç–æ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
        '–°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ'
      ]
    });
  }

  return recommendations;
};

/**
 * Simple local sentiment analysis (fallback without API)
 * Analyzes Russian text for positive/negative keywords
 */
export const simpleLocalSentimentAnalysis = (text) => {
  if (!text) return { score: 5, sentiment: 'neutral' };

  const positiveWords = [
    '—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥',
    '–≤–µ—Å–µ–ª–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '—Ä–∞–¥–æ—Å—Ç—å', '–ª—é–±–æ–≤—å',
    '—É—Å–ø–µ—Ö', '–ø–æ–±–µ–¥–∞', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '—ç–Ω–µ—Ä–≥–∏—è', '–ø–æ–∑–∏—Ç–∏–≤', '—É–ª—ã–±–∫–∞'
  ];

  const negativeWords = [
    '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å–Ω–æ', '—É—Å—Ç–∞–ª', '–∑–ª–æ–π', '—Ä–∞–∑–¥—Ä–∞–∂—ë–Ω',
    '—Å–∫—É—á–Ω–æ', '–±–æ–ª—å', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å—Ç—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–≥–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—Ç—Ä–∞—Ö',
    '–æ–¥–∏–Ω–æ–∫–æ', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '–ø—Ä–æ–≤–∞–ª', '–æ—à–∏–±–∫–∞', '–Ω–µ—É–¥–∞—á–∞'
  ];

  const lowerText = text.toLowerCase();

  let positiveCount = 0;
  let negativeCount = 0;

  positiveWords.forEach(word => {
    if (lowerText.includes(word)) positiveCount++;
  });

  negativeWords.forEach(word => {
    if (lowerText.includes(word)) negativeCount++;
  });

  // Calculate score
  const total = positiveCount + negativeCount;
  if (total === 0) {
    return { score: 5, sentiment: 'neutral', confidence: 0.5 };
  }

  const positiveRatio = positiveCount / total;
  const score = Math.round(1 + (positiveRatio * 9)); // 1-10 scale

  return {
    score,
    sentiment: score >= 7 ? 'positive' : score <= 4 ? 'negative' : 'neutral',
    confidence: Math.abs(positiveCount - negativeCount) / total
  };
};
