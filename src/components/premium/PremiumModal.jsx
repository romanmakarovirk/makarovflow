import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Crown, Star, CreditCard, Wallet, X, Check } from 'lucide-react';
import Modal from '../ui/Modal';
import Button from '../ui/Button';
import { useStore } from '../../store/useStore';
import { haptic, webApp } from '../../utils/telegram';

const PremiumModal = ({ isOpen, onClose }) => {
  const { showToast } = useStore();
  const [selectedMethod, setSelectedMethod] = useState('stars');

  const features = [
    { icon: 'ü§ñ', text: 'AI –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã' },
    { icon: 'üìä', text: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞' },
    { icon: 'üé®', text: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è' },
    { icon: '‚òÅÔ∏è', text: '–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö' },
    { icon: 'üìà', text: '–ü—Ä–æ–≥–Ω–æ–∑—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' },
    { icon: 'üîî', text: '–£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' }
  ];

  const paymentMethods = [
    {
      id: 'stars',
      name: 'Telegram Stars',
      icon: Star,
      price: '99 ‚≠ê',
      description: '–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±',
      color: 'from-blue-500 to-purple-600'
    },
    {
      id: 'card',
      name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
      icon: CreditCard,
      price: '199 ‚ÇΩ',
      description: 'Visa, Mastercard, –ú–ò–†',
      color: 'from-green-500 to-teal-600'
    },
    {
      id: 'sbp',
      name: '–°–ë–ü',
      icon: Wallet,
      price: '199 ‚ÇΩ',
      description: '–ë—ã—Å—Ç—Ä—ã–π –ø–ª–∞—Ç—ë–∂',
      color: 'from-orange-500 to-red-600'
    }
  ];

  const handlePayment = async () => {
    try {
      if (selectedMethod === 'stars') {
        // Telegram Stars payment
        haptic.medium();

        // –°–æ–∑–¥–∞—ë–º invoice –¥–ª—è Telegram Stars
        const invoice = {
          title: 'MakarovFlow Premium',
          description: '–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Premium —Ñ—É–Ω–∫—Ü–∏–∏',
          payload: 'premium_monthly',
          provider_token: '', // –ü—É—Å—Ç–æ–π –¥–ª—è Stars
          currency: 'XTR', // Telegram Stars
          prices: [{ label: 'Premium –ø–æ–¥–ø–∏—Å–∫–∞', amount: 99 }] // 99 Stars
        };

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Telegram WebApp API
        if (webApp.openInvoice) {
          webApp.openInvoice(invoice.url, (status) => {
            if (status === 'paid') {
              showToast('Premium –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! üéâ', 'success');
              onClose();
            } else if (status === 'cancelled') {
              showToast('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', 'warning');
            } else {
              showToast('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã', 'error');
            }
          });
        } else {
          showToast('–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'warning');
        }
      } else if (selectedMethod === 'card' || selectedMethod === 'sbp') {
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞—Ä—Ç –∏ –°–ë–ü
        showToast('–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ', 'info');
      }
    } catch (error) {
      console.error('Payment error:', error);
      showToast('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã', 'error');
    }
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Premium">
      <div className="space-y-6">
        {/* Header */}
        <div className="text-center">
          <div className="inline-flex items-center justify-center w-20 h-20 mb-4 rounded-full bg-gradient-to-br from-yellow-500/20 to-orange-600/20">
            <Crown className="text-yellow-400" size={40} />
          </div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-yellow-400 to-orange-600 bg-clip-text text-transparent mb-2">
            MakarovFlow Premium
          </h2>
          <p className="text-gray-400">–ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º</p>
        </div>

        {/* Features */}
        <div className="grid grid-cols-2 gap-3">
          {features.map((feature, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ delay: index * 0.05 }}
              className="flex items-center gap-2 p-3 bg-gray-800/50 rounded-xl"
            >
              <span className="text-2xl">{feature.icon}</span>
              <span className="text-xs text-gray-300">{feature.text}</span>
            </motion.div>
          ))}
        </div>

        {/* Payment Methods */}
        <div className="space-y-3">
          <h3 className="text-sm font-medium text-gray-400 mb-2">–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</h3>
          {paymentMethods.map((method) => {
            const Icon = method.icon;
            const isSelected = selectedMethod === method.id;

            return (
              <motion.button
                key={method.id}
                onClick={() => {
                  setSelectedMethod(method.id);
                  haptic.light();
                }}
                className={`w-full p-4 rounded-xl transition-all ${
                  isSelected
                    ? `bg-gradient-to-r ${method.color} shadow-lg scale-[1.02]`
                    : 'bg-gray-800 hover:bg-gray-750'
                }`}
                whileTap={{ scale: 0.98 }}
              >
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className={`p-2 rounded-lg ${isSelected ? 'bg-white/20' : 'bg-gray-700'}`}>
                      <Icon size={20} />
                    </div>
                    <div className="text-left">
                      <p className="font-semibold">{method.name}</p>
                      <p className="text-xs text-gray-400">{method.description}</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-lg">{method.price}</p>
                    {isSelected && (
                      <motion.div
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        className="inline-flex items-center justify-center w-5 h-5 bg-white rounded-full mt-1"
                      >
                        <Check size={14} className="text-green-600" />
                      </motion.div>
                    )}
                  </div>
                </div>
              </motion.button>
            );
          })}
        </div>

        {/* Purchase Button */}
        <Button
          onClick={handlePayment}
          variant="primary"
          fullWidth
          className="bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700"
        >
          <Crown size={20} />
          –û—Ñ–æ—Ä–º–∏—Ç—å Premium
        </Button>

        <p className="text-xs text-center text-gray-500">
          –ü–æ–¥–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.
          <br />
          –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.
        </p>
      </div>
    </Modal>
  );
};

export default PremiumModal;
