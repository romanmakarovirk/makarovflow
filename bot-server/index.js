import { Bot, InlineKeyboard } from 'grammy';
import http from 'http';
import https from 'https';

// Bot configuration from environment variables
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || '8353631022:AAHWAts6QguP9--0S4eWxM1rb0Dr40Cmy2Y';
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://makarovflow.vercel.app';
const PORT = process.env.PORT || 3000;
const RENDER_URL = process.env.RENDER_EXTERNAL_URL || 'https://mindflow-bot-5hph.onrender.com';

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new Bot(BOT_TOKEN);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å MakarovFlow', WEB_APP_URL);

  await ctx.reply(
    `üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **MakarovFlow**!

üìñ *–î–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è* —Å AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
üìä *–¢—Ä–µ–∫–∏–Ω–≥* —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Å–Ω–∞
üìö *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã* –¥–ª—è —É—á—ë–±—ã
üî¢ *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã* –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá`,
    {
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    }
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .webApp('üöÄ –û—Ç–∫—Ä—ã—Ç—å MakarovFlow', WEB_APP_URL);

  await ctx.reply(
    '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üòä',
    { reply_markup: keyboard }
  );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start({
  onStart: () => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    console.log('üì± Telegram: @makarovflow_bot');
    console.log('üåê Web App:', WEB_APP_URL);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

// –°–æ–∑–¥–∞—ë–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render (—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç)
const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({
    status: 'ok',
    bot: 'MakarovFlow',
    uptime: process.uptime()
  }));
});

server.listen(PORT, () => {
  console.log(`üåê HTTP Server running on port ${PORT}`);
  console.log(`üîÑ Keep-alive enabled for ${RENDER_URL}`);
});

// Keep-alive —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
function keepAlive() {
  https.get(RENDER_URL, (res) => {
    console.log(`‚úÖ Keep-alive ping: ${res.statusCode}`);
  }).on('error', (err) => {
    console.log('‚ö†Ô∏è Keep-alive ping failed:', err.message);
  });
}

// –ü–∏–Ω–≥—É–µ–º —Å–µ—Ä–≤–µ—Ä –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (Render –∑–∞—Å—ã–ø–∞–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
setInterval(keepAlive, 10 * 60 * 1000);

// –ü–µ—Ä–≤—ã–π –ø–∏–Ω–≥ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
setTimeout(keepAlive, 60 * 1000);
