// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ Neon.tech –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
import pkg from 'pg';
const { Pool } = pkg;
import { readFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_MRQwX1ByEA3z@ep-winter-thunder-ag7de0em-pooler.c-2.eu-central-1.aws.neon.tech/neondb?sslmode=require',
  ssl: {
    rejectUnauthorized: false
  }
});

async function setupDatabase() {
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

    // –ß–∏—Ç–∞–µ–º SQL —Å—Ö–µ–º—É
    const schemaSQL = readFileSync(join(__dirname, 'schema.sql'), 'utf-8');

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    await pool.query(schemaSQL);

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
    console.log('');
    console.log('–°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('  - users');
    console.log('  - journal_entries');
    console.log('  - tasks');
    console.log('  - homework');
    console.log('  - schedule');
    console.log('  - ai_messages');
    console.log('  - user_settings');
    console.log('  - promo_codes');
    console.log('  - promo_code_usage');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error.message);
    process.exit(1);
  }
}

setupDatabase();
